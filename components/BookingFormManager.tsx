/* components/BookingFormManager.tsx */
"use client";

import { useState, useEffect, ChangeEvent, FormEvent } from "react";

/* ---------- types ---------- */
export interface Tourist {
  name: string;
  dob: string;
}

export interface BookingDTO {
  /** Firestore id (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏) */
  id?: string;
  bookingNumber?: string;
  operator?: string;
  region?: string;
  hotel?: string;
  checkIn?: string;
  checkOut?: string;
  room?: string;
  tourists?: Tourist[];

  bruttoClient?: number;
  bruttoOperator?: number;
  nettoOperator?: number;
  internalNet?: number;
  bankFeeAmount?: number;

  commission?: number;
  comment?: string;
  invoiceLink?: string;
  /* –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ ‚Üí –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ `voucherLinks?: string[]`  */
  status?: string;

  agentName?: string;
  agentAgency?: string;
  crocusProfit?: number;
  createdAt?: string; // ISO   ‚Äì –¥–ª—è Firestore Timestamp –ø–æ–Ω–∞–¥–æ–±. –∫–∞—Å—Ç–æ–º
  updatedAt?: string;
}

interface BookingFormManagerProps {
  /** –î–∞–Ω–Ω—ã–µ, –ø—Ä–∏—à–µ–¥—à–∏–µ –∏–∑ Firestore (–∏–ª–∏ `{}` –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏) */
  initialData?: Partial<BookingDTO>;
  onSubmit: (data: BookingDTO) => void;

  /* —Ç–µ—Ö–Ω–∏–∫–∏ */
  agentName?: string;
  agentAgency?: string;
  bookingNumber?: string;
  isManager?: boolean;
}

/* ---------- —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ ---------- */
const OPERATORS = [
  { label: "TOCO TOUR RO", val: "TOCO TOUR RO", allowNet: true },
  { label: "TOCO TOUR MD", val: "TOCO TOUR MD", allowNet: true },
  { label: "KARPATEN",     val: "KARPATEN",     allowNet: false },
  { label: "DERTOUR",      val: "DERTOUR",      allowNet: false },
  { label: "CHRISTIAN",    val: "CHRISTIAN",    allowNet: false },
] as const;

/* ====================================================================== */
export default function BookingFormManager({
  initialData = {},
  onSubmit,
  agentName = "",
  agentAgency = "",
  bookingNumber = "",
}: BookingFormManagerProps) {
  /* ---------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã ---------- */
  const [operator,        setOperator]        = useState(initialData.operator        ?? "");
  const [region,          setRegion]          = useState(initialData.region          ?? "");
  const [hotel,           setHotel]           = useState(initialData.hotel           ?? "");
  const [checkIn,         setCheckIn]         = useState(initialData.checkIn         ?? "");
  const [checkOut,        setCheckOut]        = useState(initialData.checkOut        ?? "");
  const [room,            setRoom]            = useState(initialData.room            ?? "");
  const [bruttoClient,    setBruttoClient]    = useState(String(initialData.bruttoClient    ?? ""));
  const [bruttoOperator,  setBruttoOperator]  = useState(String(initialData.bruttoOperator  ?? ""));
  const [nettoOperator,   setNettoOperator]   = useState(String(initialData.nettoOperator   ?? ""));
  const [internalNet,     setInternalNet]     = useState(String(initialData.internalNet     ?? ""));
  const [bankFeeAmount,   setBankFeeAmount]   = useState(String(initialData.bankFeeAmount  ?? ""));
  const [commission,      setCommission]      = useState<number>(initialData.commission ?? 0);
  const [comment,         setComment]         = useState(initialData.comment ?? "");
  const [invoiceLink,     setInvoiceLink]     = useState(initialData.invoiceLink ?? "");
  const [status,          setStatus]          = useState(initialData.status ?? "–ù–æ–≤–∞—è");
  const [tourists,        setTourists]        = useState<Tourist[]>(initialData.tourists?.length ? initialData.tourists : [{ name: "", dob: "" }]);

  /* ---------- –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ ---------- */
  const opInfo = OPERATORS.find(o => o.val === operator);

  useEffect(() => {
    const bc = parseFloat(bruttoClient)    || 0;
    const bo = parseFloat(bruttoOperator)  || 0;
    const n  = parseFloat(nettoOperator)   || 0;

    let comm = 0;
    if (opInfo?.allowNet) {
      comm = (bc - n) * 0.8;
    } else {
      const markup = bc - bo;
      comm = bo * 0.03 + (markup > 0 ? markup * 0.8 : 0);
    }
    setCommission(Math.round(comm * 100) / 100);
  }, [bruttoClient, bruttoOperator, nettoOperator, operator]);

  /* ---------- helpers ---------- */
  const addTourist   = () => setTourists([...tourists, { name: "", dob: "" }]);
  const delTourist   = (i: number) => setTourists(tourists.filter((_, idx) => idx !== i));
  const chTourist    = (i: number, field: keyof Tourist, val: string) =>
    setTourists(tourists.map((t, idx) => idx === i ? { ...t, [field]: val } : t));

  /* ---------- –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã ---------- */
  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();

    const bc         = parseFloat(bruttoClient)   || 0;
    const net        = parseFloat(internalNet)    || 0;
    const tax        = Math.round((commission / 0.9 - commission) * 100) / 100;
    const bankRaw    = bankFeeAmount === "" ? (bc * 0.015) : parseFloat(bankFeeAmount);
    const bankValid  = Number.isFinite(bankRaw) ? bankRaw : 0;
    const croProfit  = Math.round(((bc - net) - commission - tax - bankValid) * 100) / 100;

    const cleanedTourists = tourists.filter(t => t.name || t.dob);

    const payload: BookingDTO = {
      ...initialData, // –Ω–∞ —Å–ª—É—á–∞–π partial-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      bookingNumber: initialData.bookingNumber ?? bookingNumber,
      operator, region, hotel, checkIn, checkOut, room,
      tourists: cleanedTourists,
      bruttoClient:   bc,
      bruttoOperator: parseFloat(bruttoOperator) || 0,
      nettoOperator:  parseFloat(nettoOperator)  || 0,
      internalNet:    net,
      bankFeeAmount:  bankValid,
      commission,
      comment,
      invoiceLink,
      status,
      agentName,
      agentAgency,
      crocusProfit: croProfit,
      updatedAt: new Date().toISOString(),
      createdAt: initialData.createdAt ?? new Date().toISOString(),
    };

    onSubmit(payload);
  };

  /* ---------- —Ä–∞—Å—á—ë—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–∏—Ñ—Ä ---------- */
  const bc            = parseFloat(bruttoClient) || 0;
  const bankRaw       = bankFeeAmount === "" ? (bc * 0.015) : parseFloat(bankFeeAmount);
  const bankValidNum  = Number.isFinite(bankRaw) ? bankRaw : 0;
  const bankPercent   = bc ? ((bankValidNum / bc) * 100).toFixed(2) : "0.00";
  const tax           = Math.round((commission / 0.9 - commission) * 100) / 100;
  const crocusProfit  = Math.round(((bc - (parseFloat(internalNet)||0)) - commission - tax - bankValidNum) * 100) / 100;

  /* ================================================================== */
  return (
    <form onSubmit={handleSubmit} className="space-y-6 bg-white p-6 rounded-lg shadow">
      {/* -------- –∞–≥–µ–Ω—Ç -------- */}
      <div className="bg-gray-100 p-3 rounded text-sm text-gray-700">
        <p><strong>–ò–º—è –∞–≥–µ–Ω—Ç–∞:</strong> {agentName}</p>
        <p><strong>–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ:</strong> {agentAgency}</p>
      </div>

      {/* -------- –ø–æ–ª—è –±—Ä–æ–Ω–∏ -------- */}
      {/* –æ–ø–µ—Ä–∞—Ç–æ—Ä + –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block font-medium">–û–ø–µ—Ä–∞—Ç–æ—Ä</label>
          <select
            required
            className="w-full border rounded p-2"
            value={operator}
            onChange={e => setOperator(e.target.value)}
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ‚Ä¶</option>
            {OPERATORS.map(o => (
              <option key={o.val} value={o.val}>{o.label}</option>
            ))}
          </select>
        </div>
        <div>
          <label className="block font-medium">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</label>
          <input
            required
            className="w-full border rounded p-2"
            value={region}
            onChange={e => setRegion(e.target.value)}
          />
        </div>
      </div>

      {/* –æ—Ç–µ–ª—å */}
      <label className="block font-medium">–û—Ç–µ–ª—å</label>
      <input
        required
        className="w-full border rounded p-2"
        value={hotel}
        onChange={e => setHotel(e.target.value)}
      />

      {/* –¥–∞—Ç—ã */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block font-medium">–ó–∞–µ–∑–¥</label>
          <input type="date" required className="w-full border rounded p-2" value={checkIn}  onChange={e => setCheckIn(e.target.value)} />
        </div>
        <div>
          <label className="block font-medium">–í—ã–µ–∑–¥</label>
          <input type="date" required className="w-full border rounded p-2" value={checkOut} onChange={e => setCheckOut(e.target.value)} />
        </div>
      </div>

      {/* room */}
      <label className="block font-medium">–ö–æ–º–Ω–∞—Ç–∞</label>
      <input className="w-full border rounded p-2" value={room} onChange={e => setRoom(e.target.value)} />

      {/* -------- —Ç—É—Ä–∏—Å—Ç—ã -------- */}
      <label className="block font-medium">–¢—É—Ä–∏—Å—Ç—ã</label>
      {tourists.map((t, i) => (
        <div key={i} className="flex space-x-2 mb-2">
          <input
            required
            className="flex-1 border rounded p-2"
            placeholder="–§–∞–º–∏–ª–∏—è –ò–º—è"
            value={t.name}
            onChange={e => chTourist(i, "name", e.target.value)}
          />
          <input
            required
            type="date"
            className="flex-1 border rounded p-2"
            value={t.dob}
            onChange={e => chTourist(i, "dob", e.target.value)}
          />
          {tourists.length > 1 && (
            <button
              type="button"
              className="px-3 text-red-600"
              onClick={() => delTourist(i)}
            >üóë</button>
          )}
        </div>
      ))}
      <button type="button" onClick={addTourist} className="text-blue-600 text-sm">
        + –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–∏—Å—Ç–∞
      </button>

      {/* -------- —Ñ–∏–Ω. –ø–æ–ª—è -------- */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block font-medium">Brutto –∫–ª–∏–µ–Ω—Ç–∞ (‚Ç¨)</label>
          <input
            required
            type="number"
            step="0.01"
            className="w-full border rounded p-2"
            value={bruttoClient}
            onChange={e => setBruttoClient(e.target.value)}
          />
        </div>
        <div>
          <label className="block font-medium">Brutto –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (‚Ç¨)</label>
          <input
            required={!opInfo?.allowNet}
            disabled={opInfo?.allowNet}
            type="number"
            step="0.01"
            className="w-full border rounded p-2"
            value={bruttoOperator}
            onChange={e => setBruttoOperator(e.target.value)}
          />
        </div>
      </div>

      {opInfo?.allowNet && (
        <div>
          <label className="block font-medium">Netto –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (‚Ç¨)</label>
          <input
            required
            type="number"
            step="0.01"
            className="w-full border rounded p-2"
            value={nettoOperator}
            onChange={e => setNettoOperator(e.target.value)}
          />
        </div>
      )}

      <div>
        <label className="block font-medium">Net (–≤–Ω—É—Ç—Ä. —É—á—ë—Ç)</label>
        <input
          type="number"
          step="0.01"
          className="w-full border rounded p-2"
          value={internalNet}
          onChange={e => setInternalNet(e.target.value)}
        />
      </div>

      {/* ------------ –ø—Ä–æ—á–µ–µ ------------ */}
      <div>
        <label className="block font-medium">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
        <textarea className="w-full border rounded p-2" value={comment} onChange={e => setComment(e.target.value)} />
      </div>

      <div>
        <label className="block font-medium">–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω–≤–æ–π—Å</label>
        <input className="w-full border rounded p-2" type="url" value={invoiceLink} onChange={e => setInvoiceLink(e.target.value)} />
      </div>

      <div>
        <label className="block font-medium">–°—Ç–∞—Ç—É—Å</label>
        <select className="w-full border rounded p-2" value={status} onChange={e => setStatus(e.target.value)}>
          <option value="–ù–æ–≤–∞—è">–ù–æ–≤–∞—è</option>
          <option value="–ì–æ—Ç–æ–≤–∞ –∫ –æ–ø–ª–∞—Ç–µ —Ç—É—Ä–∏—Å—Ç–æ–º">–ì–æ—Ç–æ–≤–∞ –∫ –æ–ø–ª–∞—Ç–µ</option>
          <option value="–û–ø–ª–∞—á–µ–Ω–æ —Ç—É—Ä–∏—Å—Ç–æ–º">–û–ø–ª–∞—á–µ–Ω–æ —Ç—É—Ä–∏—Å—Ç–æ–º</option>
          <option value="–û–∂–∏–¥–∞–µ—Ç confirm">–û–∂–∏–¥–∞–µ—Ç confirm</option>
          <option value="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</option>
          <option value="–ó–∞–≤–µ—Ä—à–µ–Ω–æ">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
          <option value="–û—Ç–º–µ–Ω–µ–Ω">–û—Ç–º–µ–Ω–µ–Ω</option>
        </select>
      </div>

      <div>
        <label className="block font-medium">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è (‚Ç¨)</label>
        <input
          type="number"
          step="0.01"
          className="w-full border rounded p-2"
          placeholder={`–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.5% = ${(bc * 0.015).toFixed(2)} ‚Ç¨`}
          value={bankFeeAmount}
          onChange={e => setBankFeeAmount(e.target.value)}
        />
      </div>

      {/* --------- –∏—Ç–æ–≥–∏ --------- */}
      <div className="p-3 bg-gray-50 border rounded text-sm space-y-1">
        <p><strong>–ö–æ–º–∏—Å—Å–∏—è –∞–≥–µ–Ω—Ç–∞:</strong> {commission.toFixed(2)} ‚Ç¨</p>
        <p><strong>–ù–∞–ª–æ–≥ (10 %):</strong> {tax.toFixed(2)} ‚Ç¨</p>
        <p>
          <strong>–ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞ ({bankPercent}%):</strong> {bankValidNum.toFixed(2)} ‚Ç¨
        </p>
        <p><strong>–î–æ—Ö–æ–¥ Crocus Tour:</strong> {crocusProfit.toFixed(2)} ‚Ç¨</p>
      </div>

      <button type="submit" className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
      </button>
    </form>
  );
}