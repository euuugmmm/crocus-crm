// pages/api/telegram/notify.ts
import type { NextApiRequest, NextApiResponse } from "next";
import { adminDB } from "@/lib/firebaseAdmin";

const BOT_URL = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
async function send(chatId: number | string, text: string) {
  await fetch(BOT_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: "HTML" }),
  });
}

const agentTemplates = {
  newBooking: {
    ru: (d: any) => `üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>
‚Ññ <b>${d.bookingNumber}</b>
${d.hotel} / ${d.operator}
–°–∫–æ—Ä–æ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤–æ–∑—å–º—ë—Ç –µ—ë –≤ —Ä–∞–±–æ—Ç—É. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–µ—Å—å.
–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`,
    en: (d: any) => `üÜï <b>New booking</b>
No. <b>${d.bookingNumber}</b>
${d.hotel} / ${d.operator}
Our manager will process it soon. You'll receive updates here.
For more info, please contact us.`,
    ua: (d: any) => `üÜï <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>
‚Ññ <b>${d.bookingNumber}</b>
${d.hotel} / ${d.operator}
–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –æ–ø—Ä–∞—Ü—é—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–∑–∞–±–∞—Ä–æ–º. –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≤—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç—É—Ç.
–î–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏.`,
  },
  statusChanged: {
    ru: (d: any) => `‚úèÔ∏è <b>–ó–∞—è–≤–∫–∞ ‚Ññ${d.bookingNumber}</b> –∏–∑–º–µ–Ω–∏–ª–∞ —Å—Ç–∞—Ç—É—Å —Å <b>${d.oldStatus}</b> –Ω–∞ <b>${d.newStatus}</b>.
–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.`,
    en: (d: any) => `‚úèÔ∏è <b>Booking ‚Ññ${d.bookingNumber}</b> status changed from <b>${d.oldStatus}</b> to <b>${d.newStatus}</b>.
For more details, please contact us.`,
    ua: (d: any) => `‚úèÔ∏è <b>–ó–∞—è–≤–∫–∞ ‚Ññ${d.bookingNumber}</b> –∑–º—ñ–Ω–∏–ª–∞ —Å—Ç–∞—Ç—É—Å –∑ <b>${d.oldStatus}</b> –Ω–∞ <b>${d.newStatus}</b>.
–î–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏.`,
  },
  newComment: {
    ru: (d: any) => `üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b> –∫ –∑–∞—è–≤–∫–µ ‚Ññ<b>${d.bookingNumber}</b>:
${d.comment}
–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ CRM.`,
    en: (d: any) => `üí¨ <b>New comment</b> on booking ‚Ññ<b>${d.bookingNumber}</b>:
${d.comment}
You can reply in the CRM.`,
    ua: (d: any) => `üí¨ <b>–ù–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä</b> –¥–æ –∑–∞—è–≤–∫–∏ ‚Ññ<b>${d.bookingNumber}</b>:
${d.comment}
–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –≤ CRM.`,
  },
};

const managerTemplates = {
  newBooking: {
    ru: (d: any) => `üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ${d.bookingNumber}</b>
${d.hotel} / ${d.operator}
–û—Ç –∞–≥–µ–Ω—Ç–∞: ${d.agentName} (${d.agentAgency})
–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ CRM.`,
  },
  newUser: {
    ru: (d: any) => `üë§ <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞</b>
–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ: <b>${d.agencyName}</b>
–ò–º—è: <b>${d.name}</b>
Email: ${d.email}`,
  },
  newComment: {
    ru: (d: any) => `üí¨ <b>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b> –∫ –∑–∞—è–≤–∫–µ ‚Ññ<b>${d.bookingNumber}</b> –æ—Ç –∞–≥–µ–Ω—Ç–∞:
${d.comment}
–°–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ CRM.`,
  },
};

const STATUS_LABELS: Record<string, Record<string, string>> = {
  ru: {
    new: "–ù–æ–≤–∞—è",
    awaiting_payment: "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã",
    paid: "–û–ø–ª–∞—á–µ–Ω–æ —Ç—É—Ä–∏—Å—Ç–æ–º",
    awaiting_confirm: "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
    confirmed: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
    finished: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    cancelled: "–û—Ç–º–µ–Ω–µ–Ω–∞",
  },
  en: {
    new: "New",
    awaiting_payment: "Awaiting Payment",
    paid: "Paid",
    awaiting_confirm: "Awaiting Confirm",
    confirmed: "Confirmed",
    finished: "Finished",
    cancelled: "Cancelled",
  },
  ua: {
    new: "–ù–æ–≤–∞",
    awaiting_payment: "–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏",
    paid: "–û–ø–ª–∞—á–µ–Ω–æ —Ç—É—Ä–∏—Å—Ç–æ–º",
    awaiting_confirm: "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
    confirmed: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ",
    finished: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    cancelled: "–°–∫–∞—Å–æ–≤–∞–Ω–æ",
  },
};

function makeText(
  templates: Record<string, any>,
  type: string,
  data: any,
  lang: string
) {
  const group = templates[type];
  if (group) return (group[lang] || group.ru)(data);
  return {
    ru: "‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
    en: "‚ö†Ô∏è Unsupported notification type.",
    ua: "‚ö†Ô∏è –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.",
  }[lang];
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== "POST") return res.status(405).end();

  const { agentId, managers, type, data: origData } = req.body as {
    agentId?: string;
    managers?: boolean;
    type: string;
    data: any;
  };

  // –°–æ—Ö—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —Å—Ç–∞—Ç—É—Å–æ–≤ (–¥–ª—è statusChanged)
  const origOld = origData.oldStatus;
  const origNew = origData.newStatus;

  // 1) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
  if (agentId) {
    const snap = await adminDB.doc(`users/${agentId}`).get();
    const user = snap.data() as any;
    if (user?.tgChatId) {
      const lang = user.notifyLang || "ru";
      const data = { ...origData };
      if (type === "statusChanged") {
        data.oldStatus = STATUS_LABELS[lang][origOld] || origOld;
        data.newStatus = STATUS_LABELS[lang][origNew] || origNew;
      }
      const text = makeText(agentTemplates, type, data, lang);
      await send(user.tgChatId, text);
    }
  }

  // 2) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (—Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
  if (managers) {
    const snap = await adminDB
      .collection("users")
      .where("role", "==", "manager")
      .where("tgChatId", ">", 0)
      .get();

    await Promise.all(
      snap.docs.map(async (d) => {
        const u = d.data() as any;
        const data = { ...origData };
        const text = makeText(managerTemplates, type, data, "ru");
        await send(u.tgChatId, text);
      })
    );
  }

  res.status(200).end("ok");
}