/**
 * scripts/fixCommissionPaid.js
 *
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º `node scripts/fixCommissionPaid.js`
 * ‚Äì –ø—Ä–æ—á–∏—Ç–∞–µ—Ç .env.local, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Firebase Admin
 * ‚Äì —Å–±—Ä–æ—Å–∏—Ç commissionPaid=false —É –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ bookings
 */

const fs = require("fs");
const path = require("path");
const { initializeApp, cert, getApps } = require("firebase-admin/app");
const { getFirestore, FieldValue } = require("firebase-admin/firestore");

// ‚îÄ‚îÄ‚îÄ 1) –†—É—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ .env.local ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const envFile = path.resolve(__dirname, "../.env.local");
if (fs.existsSync(envFile)) {
  const lines = fs.readFileSync(envFile, "utf-8").split(/\r?\n/);
  for (let line of lines) {
    line = line.trim();
    if (!line || line.startsWith("#")) continue;
    const m = line.match(/^([\w]+)\s*=\s*(.*)$/);
    if (!m) continue;
    let [, key, val] = m;
    // —É–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–º–ª—è—é—â–∏–µ –∫–∞–≤—ã—á–∫–∏
    if (val.startsWith('"') && val.endsWith('"')) {
      val = val.slice(1, -1);
    }
    process.env[key] = val;
  }
}

// ‚îÄ‚îÄ‚îÄ 2) –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function getCred(plainEnv, b64Env) {
  if (process.env[plainEnv]) {
    try { return JSON.parse(process.env[plainEnv]); }
    catch (e) { throw new Error(`${plainEnv} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON`); }
  }
  if (process.env[b64Env]) {
    try {
      const decoded = Buffer.from(process.env[b64Env], "base64").toString("utf8");
      return JSON.parse(decoded);
    } catch {
      throw new Error(`${b64Env} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π base64 JSON`);
    }
  }
  throw new Error(`–ù–∏ ${plainEnv}, –Ω–∏ ${b64Env} –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏`);
}

// ‚îÄ‚îÄ‚îÄ 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if (!getApps().length) {
  initializeApp({
    credential: cert(
      getCred(
        "FIREBASE_SERVICE_ACCOUNT_JSON",
        "FIREBASE_SERVICE_ACCOUNT_JSON_BASE64"
      )
    ),
  });
}
const db = getFirestore();

// ‚îÄ‚îÄ‚îÄ 4) –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function fixCommissionPaid() {
  console.log("üîç –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ bookings‚Ä¶");
  const snapshot = await db.collection("bookings").get();
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${snapshot.size} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.`);

  const BATCH_SIZE = 500;
  let batch = db.batch();
  let count = 0;

  for (const docSnap of snapshot.docs) {
    // –æ–±–Ω–æ–≤–ª—è–µ–º commissionPaid = false
    batch.update(docSnap.ref, {
      commissionPaid: false,
      // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±–Ω—É–ª–∏—Ç—å —Å—É–º–º—É, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
      // commissionPaidAmount: 0,
    });
    count++;

    // –∫–∞–∂–¥—ã–µ BATCH_SIZE —Å–¥–µ–ª–∞–µ–º commit
    if (count % BATCH_SIZE === 0) {
      await batch.commit();
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${count} –∑–∞–ø–∏—Å–µ–π‚Ä¶`);
      batch = db.batch();
    }
  }

  // –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ
  if (count % BATCH_SIZE !== 0) {
    await batch.commit();
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ ${count} –∑–∞–ø–∏—Å–µ–π.`);
  }

  console.log("üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!");
}

fixCommissionPaid().catch((err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:", err);
  process.exit(1);
});